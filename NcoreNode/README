
Ncoreqp 节点端
版本 vd1.1.1

        GUI 端


        RPM 端


        deb 端


        client 端

          1). 发包流程

              发包

              头信息
                Key号:
                ID号：
                状态：
                地址：
                类型：
                长度：
                数据：

              json格式

              1. 初次请求
                 发请求包  { 包含key号 }    返回包 { ID号 用户名 密码 执行任务 }

              2. 返回进度包
                发请求包     { 包含状态 抢票成功 }  返回包 { 数据： 收到}

              3. 再次获取执行任务
                发请求包    { 包含Key号 获取执行任务 }

          2). 数据加密 (二期)

          3). 获取接收任务

              时隔

        功能：
        1. 检测任务数
        2. 存活发包 ~ 15s
        3. 发关注车票状态
        4.


SYN，ACK是标志位
SEQ，AN是数据包序号
SYN=1, ACK=0, SEQ=200 的意思是：发送的为一个SYN请求，发送端的初始数据包序号为200
SYN=1, ACK=1, SEQ=4800, AN=201 的意思是：接收端的确认信息，且接收端的初始数据包序号为4800


建立连接状态
syn
ack
seq
an

Error


TYPE
get_task
push_task

数据库需求




--------------------------------------------------------------------------------

服务端

    [ 进程1 ]
    1. 判断是否激活，分配id
        机制: 进程1, 清理取消的车票; 监听客户端socket请求

客户端

	[ 进程1 ]
	1. 首次激活, 获得id
        机制：进程1, 客户端发起无id号数据包, 服务端分配id号同时写入数据库;
            (1). 时间有效期10分钟, 间隔时间5秒, 客户端每五秒写入;
            (2).

	2. 获取任务 (client_exec_task1)
        机制： 进程1, 60秒发送数据包获取新任务, 事先判断当前任务列表;
            (1).
            (2). 判断是否是第一次发包
            (3). 180秒发送一次数据包, 获取新任务列表

    [ 进程2 ]
	3. 执行任务
        机制： 进程2, 循环执行任务,  一直到获取结果, 结束任务;
            (0). 检测机制: 日期是否小于今天,
            (1). 读取 task_data.pk 文件 获取任务;
			(2). 根据任务 爬虫 车票状态;
			(3). 多进程 (10);
			(4). 每进程 3 线程

    [ 进程3 ]
    4. 返回结果
        机制： 进程3, 向服务器返回结果

















